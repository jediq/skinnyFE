buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id "org.sonarqube" version "2.0.1"
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    def jettyVersion = '9.3.8.v20160314'

    compile group: 'org.eclipse.jetty', name: 'jetty-server', version:  jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-client', version: jettyVersion
    compile group: 'org.codehaus.jackson', name:'jackson-mapper-asl', version:'1.9.2'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'
    compile group: 'com.github.jknack', name: 'handlebars', version: '4.0.1'
    compile group: 'com.github.jknack', name: 'handlebars-jackson2', version: '4.0.1'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'junit-addons', name: 'junit-addons', version: '1.4'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.jediq.skinnyfe.SkinnyFE'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

// build the example zips
File[] examplesDir = file('src/main/documentation/examples').listFiles();

Map examplesInProps = new Properties();

examplesDir.each {
    if (!it.name.startsWith('example')) {
        return;
    }
    String exampleName = it.getName()

    tasks.create(exampleName, Zip) {
        from('src/main/documentation/examples/'+exampleName) {
            into 'build/site/examples'
        }
        baseName = exampleName
    }
    build.dependsOn exampleName

    File[] exampleFiles = file(it).listFiles();
    exampleFiles.each { exampleFile ->
        if (exampleFile.isFile()) {
            examplesInProps.put(exampleName + "_" + (exampleFile.name - "."), exampleFile.getText('UTF-8'));
        }
    }
}

task stageDocs(type:Copy, dependsOn:shadowJar) {
    from 'src/main/documentation'
    into 'build/doc-staging'
    expand examplesInProps
}

task docs(type:Exec, dependsOn:stageDocs) {
    workingDir 'build/doc-staging'
    commandLine 'mkdocs', 'build'
}

task moveSite(type:Copy, dependsOn:docs) {
    from 'src/main/site/'
    into 'build/distributions'
}

task moveJar(type:Copy, dependsOn:moveSite) {
    from 'build/libs/skinnyFE-all.jar'
    into 'build/distributions'
}

build.dependsOn moveJar

